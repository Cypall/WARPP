/**************************************************************************\
*                                                                          *
*   Copyright (C) 2017-2022 mrjnumber1                                     *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : mrjnumber1                                             *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2022-09-16                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change hardcoded quick item switch delay
///
CustomQSDelay = function()
{
	const _ = 'CustomQSDelay : ';

	$$(_ + '1.1 - Define the default values')
	const old_tick = 10;
	const old_tick_ms = old_tick * 1000;

	$$(_ + '1.2 - Find all the comparisons to old_tick in ms')
	let code =
		CMP(EAX, old_tick_ms)	// cmp eax, 10000
	+	JNB(POS2WC)				// jnb _next
	+ 	MOV(R32, [POS4WC])		// mov regA, dword ptr [g_qsTick]
	;

	let addrs = Exe.FindHexN(code);
	if (addrs.isEmpty())
	{
		code = code.replace(JNB(POS2WC), JNB(WCp)); //_next is closer
		addrs = Exe.FindHexN(code);
	}
	if (addrs.isEmpty())
		throw Error("Quickswitch Tick references missing");

	$$(_ + '1.3 - Extract the "g_qsTick" address (needed later)')
	const g_qsTick = Exe.GetUint32(addrs[0] + code.byteCount() - 4);

	$$(_ + '2.1 - Get the new delay from user in ticks')
	const new_tick = Exe.GetUserInput('$myNewTick', D_Uint8, "Clock Ticks", "Enter the new quick switch delay", old_tick);
	if (new_tick === false)
		Cancel("Delay", 10);

	$$(_ + '2.2 - Calculate the new tick in ms')
	const new_tick_ms = new_tick * 1000;

	$$(_ + '2.3 - Prepare code for searching old_tick assignment')
	code = MOV(EAX, old_tick); //mov eax, 10

	addrs.forEach( (addr, idx) =>
	{
		const __ = `${_} [${idx}] `;

		$$(__ + '2.4 - Replace the ms value')
		Exe.SetUint32(addr + 1, new_tick_ms);

		$$(__ + '2.5 - Look for the old_tick assignment after the ms (used for showing "n seconds to next quick switch ...")')
		const addr2 = Exe.FindHex(code, addr + 17, addr + 67);
		if (addr2 < 0)
			throw Error(`Delay subtraction missing for No.${idx+1}`);

		$$(__ + '2.6 - Replace the tick value')
		Exe.SetUint32(addr2 + 1, new_tick);
	});

	// for when opening the full equip window - although the
	// status of the quickswitch button doesn't reload
	// when the time is expired anyways.. oh well.

	$$(_ + '3.1 - Find the first use of g_qsTick')
	code =
		PUSH_R                // push regA
	+	MOV(R32, [g_qsTick])  // mov regB, dword ptr [g_qsTick]
	;
	const ui_addr = Exe.FindHex(code);
	if (ui_addr < 0)
		throw Error("UI quickswitch addr missing");

	$$(_ + '3.2 - Find the comparison to the default tick_ms value after it')
	code = CMP(EAX, old_tick_ms)	// CMP EAX, old_tick_ms (default)
	addr = Exe.FindHex(code, ui_addr + 6, ui_addr + 30);
	if (addr < 0)
		throw Error("Comparison missing");

	$$(_ + '3.3 - Unless its already been handled in the loop, replace the ms tick')
	if (addrs.indexOf(addr) < 0)
		Exe.SetUint32(addr + 1, new_tick_ms);

	return true;
};

///
/// \brief Disable for Unsupported date
///
CustomQSDelay.validate = () =>
	Exe.BuildDate >= 20170517;
