/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2021 Shinryo                                           *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo                                                *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2021-07-04                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change the confitional jump to JMP after accountID comparison against GM ID inside CPc::SetSprNameList and CPc::SetActNameList functions
///
NoGMSprite = function()
{
	const _ = 'NoGMSprite : ';

	$$(_ + '1.1 - Find the location where both functions are called')
	const halfCode =
		PUSH(POS3WC)    //push offset actName / sprName
	+	PUSH(5)         //push 5 ; layer
	+	MOV(ECX, R32)   //mov ecx, regA
	+	CALL(NEG2WC)    //call CPc::SetActNameList / CPc::SetSprNameList
	;
	const code = halfCode + halfCode;
	const addr = Exe.FindHex(code);

	/* - Seems to be not of any use
	if (addr < 0)
	{
		code = code.remove( MOV(ECX, R32) ); //Remove the first MOV ECX, regA . It might have been assigned earlier
		addr = Exe.FindHex(code);
	}
	*/

	if (addr < 0)
		throw Error("Function CALLs not found");

	$$(_ + '1.2 - Extract the Function addresses (PHYSICAL)')
	const pos2 = code.byteCount() - 4;
	const pos1 = pos2 - halfCode.byteCount();

	const funcs =
	[
		Exe.GetTgtAddr(addr + pos1, PHYSICAL), //CPc::SetActNameList PHYSICAL address
		Exe.GetTgtAddr(addr + pos2, PHYSICAL)  //CPc::SetSprNameList PHYSICAL address
	];

	$$(_ + '2.1 - Prep code to look for IsNameYellow function call')
	const prefix =
		CALL(ALLWC)     //call IsNameYellow ; Compares accountID against GM IDs
	+	ADD(ESP, 4)     //add esp, 4
	+	TEST(AL, AL)    //test al, al
	;
	const csize = prefix.byteCount();

	const suffix = JZ(Exe.Version === 9 ? WCp : POS2WC);

	funcs.forEach( (fnAddr, i) =>
	{
		const __ = `${_} [${i}] `;

		$$(__ + '2.2 - Find the CALL inside the Set*NameList functions')
		const addr = Exe.FindHex(prefix + suffix, fnAddr, fnAddr + 0x80);
		if (addr < 0)
			throw Error(`CALL not found for No. ${i+1}`);

		$$(__ + '2.3 - Change conditional jump')
		Exe.SetJMP(addr + csize);
	});

	return true;
};
