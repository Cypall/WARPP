/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2022 Neo-Mind                                       *
*   Copyright (C) 2020-2022 Andrei Karas (4144)                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind, Andrei (4144)                                *
*   Created Date  : 2022-09-24                                             *
*   Last Modified : 2022-09-24                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Update the function handling ZC_ACK_SCHEDULER_CASHITEM packet to incorporate the location & view sprite fields
///
PreviewInShop = function()
{
	const _ = 'PreviewInShop : ';

	$$(_ + '1.1 - Calculate essential values')
	const isNewType = Exe.Version > 11 && (
		(Exe.BuildDate > 20191220 && (ROC.IsZero || ROC.IsRenewal)) || 
		(Exe.BuildDate > 20200720)
	); //Newer function format for latest clients
	
	const srcLoc = isNewType ? [POS4WC] : [R32, ' [000001.0]']; //displacement is 6 or 4 . Source Location is direct memory address for newer clients

	$$(_ + '1.2 - Find the location inside the function handling the packet where we need to place the JMP')
	let code =
		LEA(ECX, [EBP, NEG2WC])     //lea ecx, [LOCAL.x] ; iteminfo location
	+	CALL(ALLWC)                 //call func
	+	MOVSX(EAX, srcLoc)          //movsx eax, word ptr [<srcLoc>]
	+	(Exe.Version === 11
	?
		MOV([EBP, NEG2WC], EAX)     //mov dword ptr [LOCAL.y], eax
	:
		''
	)
	+	CMP(EAX, ' [000010..]')     //cmp eax, 8 or 0Ah
	+	JA(WCp)                     //ja short _skip
	;

	const hookAddr = Exe.FindHex(code);
	if (hookAddr < 0)
		throw Error("Hook pattern missing");

	$$(_ + '1.3 - Next find the block size addition after it')
	let parts =
	[
		ADD(R32, WCp)               //add regA, immA ; block size addition
	,
		MOVSX(EAX, srcLoc)          //movsx eax, word ptr [<srcLoc>] ; different from earlier code but same pattern
	,
		INC(R32)                    //inc regB ; loop increment
	];

	let prefix, suffix;
	if (isNewType) //VC14.16 newer
	{
		prefix = parts[2] + parts[1];
		suffix = parts[0];
	}
	else if (Exe.Version > 11) //VC14.16 older
	{
		prefix = '';
		suffix = parts.join('');
	}
	else //VC11
	{
		prefix = parts[1] + parts[2];
		suffix = parts[0];
	}
	let addr = Exe.FindHex(prefix + suffix, hookAddr + code.byteCount(), hookAddr + 0x100);
	if (addr < 0)
		throw Error("Loop increment missing");

	$$(_ + '1.4 - Extract the addition instruction & the block size value (immediate argument)')
	const sizeAdd = Instr.FromAddr(addr + prefix.byteCount());
	const blockSize = sizeAdd.Immd;

	$$(_ + '1.5 - Setup the register to be used with the block size')
	const blockReg = isNewType ? ECX : sizeAdd.MRM.getReg('M');

	$$(_ + '1.6 - Extract the original instruction at the hook address & the displacement')
	const leaIns = Instr.FromAddr(hookAddr);
	const iiOffset = leaIns.Disp;

	$$(_ + '2.1 - Construct the function code in parts which varies based on isNewType')
	const viewOffset = (isNewType || Exe.BuildDate < 20171000) ? 112 : 116;
	const locOffset = isNewType ? 8 : 4;

	parts =
	[//0
		leaIns          //lea ecx, [ebp + <iiOffset>]
	+	PUSH_EAX        //push eax

	,//1
		''

	,//2
		MOVZX(EAX, [blockReg, blockSize])      //movzx eax, dword ptr [<blockReg> + <blockSize>]
	+	MOV([EBP, iiOffset + viewOffset], EAX) //mov dword ptr [ebp + <iiOffset> + <viewOffset>], eax
	+	MOV(EAX, [blockReg, blockSize + 2])    //mov eax, dword ptr [<blockReg> + <blockSize> + 2]
	+	MOV([EBP, iiOffset + locOffset], EAX)  //mov dword ptr [ebp + <iiOffset> + <locOffset>], eax

	,//3
		''

	,//4
		POP_EAX         //pop eax
	+	JMP(Filler(1))  //jmp retnAddr ; after the original LEA
	];

	if (isNewType)
	{
		$$(_ + '2.2 - For newer formats, find the end of the loop (the conditional jump)')
		addr = sizeAdd.Addr + suffix.byteCount();
		code =
			CMP(R32, R32)  //cmp regA, regB ; loop var < final value
		+	JL(NEG2WC)     //jl _loop
		;

		let endAddr = Exe.FindHex(code, addr, addr + 0x30);
		if (endAddr < 0)
			throw Error("End of Loop missing");

		endAddr += code.byteCount();

		$$(_ + '2.3 - Goto the JL\'s target')
		addr = Exe.GetTgtAddr(endAddr - 4, PHYSICAL);

		$$(_ + '2.4 - Find the assignment to stack location from ECX before it.')
		const beginAddr = Exe.FindLastHex(MOV([EBP, NEG2WC], ECX), addr, addr - 0x30);
		if (beginAddr < 0)
			throw Error("Starting point missing");

		$$(_ + '2.5 - Extract the offset/displacement used in the instruction')
		const offset = Exe.GetInt32(beginAddr + 2);

		$$(_ + '2.6 - Now fill the gaps')
		parts[1] =
			PUSH(ECX)                //push ecx
		+	MOV(ECX, [EBP, offset])  //mov ecx, dword ptr [ebp + offset]
		;

		parts[3] =
			POP(ECX)                 //pop ecx
		;
	}

	$$(_ + '3.1 - Clear the SendClientFlags patch')
	Exe.ClearPatch('SendClientFlags');
	
	$$(_ + '3.2 - Prepare the arguments for auto-hook')
	const args =
	{
		targets : {
			1 : Exe.Phy2Vir(leaIns.NextAddr, CODE)
		},
		nops : 1
	};

	$$(_ + '3.3 -  Add our code & jump to it from hookAddr')
	AutoHook(hookAddr, parts, args);

	$$(_ + '3.4 - Update the block size (4 bytes for the location & 2 for viewSprite)')
	Exe.SetInt8(sizeAdd.NextAddr - 1, sizeAdd.Immd + 6);

	return true;
};

///
/// \brief Disable for unsupported clients
///
PreviewInShop.validate = () =>
	Exe.BuildDate > 20170000;

///
/// \brief Rerun SendClientFlags if it was selected when this patches selection changes
///
PreviewInShop.onSelected = PreviewInShop.onDeselected = () =>
	ReloadPatch('SendClientFlags');
